[gcode_macro testy]
gcode:
  # RESPOND TYPE=echo MSG='{"Move is  %d" % (tilt_height)}'                  
  # RESPOND TYPE=echo MSG='{"park macro is  %s" % (macro_park)}'
  #  RESPOND PREFIX=💨 MSG="aaaa  {planeCMD} "
  # ⚠️ 🏝️ 💨 🥵
  #{% set extruders_used = .split(',') if params.IS_EXTRUDER_USED is defined else none %}
 #{% for k in printer.configfile.settings.keys() %}
 #   {% if k.startswith("neopixel") %}
 #     RESPOND MSG="{k.split(' ',1)| last }"
 #   {% endif %}
 # {% endfor %}

  {% if printer.configfile.settings.quad_gantry_level is defined or
        printer.configfile.settings.z_tilt is defined or 
        printer.configfile.settings.z_tilt_ng is defined %}
    _set_status STATE="status_leveling"

    {% set has_cartographer = printer.configfile.settings.scanner is defined or printer.configfile.settings.cartographer is defined %}
    #RESPOND TYPE=echo MSG="has_cartographer is  {has_cartographer}"   
    {% set tilt_height = 2 if has_cartographer else 5 %}

    {% if printer.configfile.settings.quad_gantry_level is defined %}
      {% set leveler = printer.quad_gantry_level %}
      {% set command = "QUAD_GANTRY_LEVEL" %}
    {% elif printer.configfile.settings.z_tilt is defined %}
      {% set leveler = printer.z_tilt %}
      {% set command = "Z_TILT_ADJUST" %}
    {% elif printer.configfile.settings.z_tilt_ng is defined %}
      {% set leveler = printer.z_tilt_ng %}
      {% set command = "Z_TILT_ADJUST" %}
    {% endif %}
    
    {% if leveler is defined %}
      {% if has_cartographer and (not leveler.applied) %} 
        # { command } HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7 
        RESPOND MSG="running { command } at 20"
      {% endif %}
        # { command } HORIZONTAL_MOVE_Z={ tilt_height }
        RESPOND MSG="running { command } at { tilt_height  }"
      #G28 Z
    {% endif %}
  {% endif %}


[gcode_macro _SLICER_TOOLS]
description: TESTY IS_EXTRUDER_USED={is_extruder_used[0]+","+is_extruder_used[1]+","+is_extruder_used[2]+","+is_extruder_used[3]+","+is_extruder_used[4]+","+is_extruder_used[5]+","+is_extruder_used[6]}
gcode:
  {% if params.IS_EXTRUDER_USED is defined %}
    {% set extruders_used = params.IS_EXTRUDER_USED.split(',')  %}
    {% for i in range(extruders_used|length) %}
      {% if extruders_used[i]|lower in ['true', '1'] %}
        {% if printer["gcode_macro {i}"] is defined %}
          SET_GCODE_VARIABLE MACRO="T{i}" VARIABLE=tool_used VALUE=False
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}


[gcode_macro _FOREACH_PIXEL]
gcode:
  # RESPOND TYPE=echo MSG='{"Move is  %d" % (tilt_height)}'                  
  # RESPOND TYPE=echo MSG='{"park macro is  %s" % (macro_park)}'
  #  RESPOND PREFIX=💨 MSG="aaaa  {planeCMD} "
  # ⚠️ 🏝️ 💨 🥵
  {% for k, v in printer.neopixel.items()  %} 
     RESPOND  MSG="{k}"
  {% endfor %}

  | selectattr("isweb", "equalto", true) 


[gcode_macro TestyMcTestyFace]
gcode:
 {% if printer.configfile.settings.bed_mesh.zero_reference_position  is defined %}
  {% set probe_loc_x, probe_loc_y = printer.configfile.config.bed_mesh.zero_reference_position.replace(' ', '').split(',') %}
  G90
  G0 Z20
  G0 X{probe_loc_x} Y{probe_loc_y} F{speed_xy}
 {% endif %}

 {% if printer.configfile.settings.quad_gantry_level is defined %} QUAD_GANTRY_LEVEL                 {% endif %}
 {% if printer.configfile.settings.z_tilt            is defined %} Z_TILT_ADJUST                     {% endif %}

  
[delayed_gcode chill_absprint]
gcode:
  {% if printer.heater_bed.temperature > 80 %}
    SET_DISPLAY_TEXT MSG="reduce temp to ({printer.heater_bed.target - 5 }C°)."
    M140 S{ printer.heater_bed.target - 5 }
    UPDATE_DELAYED_GCODE ID=chill_absprint DURATION=300
  {% else %}
    SET_DISPLAY_TEXT MSG="No Gradual bed cooling necessary ({printer.heater_bed.temperature}C°)."
    M140 S0 ; turn off bed
    #M81 ; disable Power
    SET_DISPLAY_TEXT MSG="Print Complete!"
  {% endif %}

  M106 S85
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150
  SET_FAN_SPEED FAN=mcu SPEED=1.0 
  
  {% set posCenter = printer.configfile.config.bed_mesh.zero_reference_position %}
  {% set moveAccel  = printer.configfile.config.printer.max_accel | int * 0.80 %}
  G91
  G0 Z20
  G90
  G1 X{posCenter.split(",")[0]|float} Y{posCenter.split(",")[1]|float} F{moveAccel}
  
  M84

  G4 P300000
  M140 S105
  G4 P300000
  M140 S100
  G4 P300000
  M140 S95
  G4 P300000
  M140 S90
  G4 P300000

  M106 S0
  M140 S0
  SET_FAN_SPEED FAN=mcu SPEED=0
