[gcode_macro testy]
gcode:
  #G4 P{printer["gcode_macro _PRINTER_SETTINGS"].prepurge_dwell * 1000}
  #RESPOND TYPE=echo MSG="dwelling"
  #RESPOND TYPE=echo MSG='{"Move is  %d" % (tilt_height)}'                  
  #RESPOND TYPE=echo MSG='{"park macro is  %s" % (macro_park)}'
  RESPOND PREFIX=ðŸ’¨ MSG=" {planeCfg} {planeCMD} "

  
[delayed_gcode chill_absprint]
gcode:
  {% if printer.heater_bed.temperature > 80 %}
    SET_DISPLAY_TEXT MSG="reduce temp to ({printer.heater_bed.target - 5 }CÂ°)."
    M140 S{ printer.heater_bed.target - 5 }
    UPDATE_DELAYED_GCODE ID=chill_absprint DURATION=300
  {% else %}
    SET_DISPLAY_TEXT MSG="No Gradual bed cooling necessary ({printer.heater_bed.temperature}CÂ°)."
    M140 S0 ; turn off bed
    #M81 ; disable Power
    SET_DISPLAY_TEXT MSG="Print Complete!"
  {% endif %}

  M106 S85
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150
  SET_FAN_SPEED FAN=mcu SPEED=1.0 
  
  {% set posCenter = printer.configfile.config.bed_mesh.zero_reference_position %}
  {% set moveAccel  = printer.configfile.config.printer.max_accel | int * 0.80 %}
  G91
  G0 Z20
  G90
  G1 X{posCenter.split(",")[0]|float} Y{posCenter.split(",")[1]|float} F{moveAccel}
  
  M84

  G4 P300000
  M140 S105
  G4 P300000
  M140 S100
  G4 P300000
  M140 S95
  G4 P300000
  M140 S90
  G4 P300000

  M106 S0
  M140 S0
  SET_FAN_SPEED FAN=mcu SPEED=0

[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: _SET_VELOCITY_LIMIT
description: Alter the velocity limits unless printer is in nightmode
variable_nightmode: 0 
gcode: 
  {% if nightmode != 1 or params.NIGHTMODE is defined %} _SET_VELOCITY_LIMIT { rawparams } {% endif %}
  {% if params.NIGHTMODE is defined %} SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=nightmode VALUE={params.NIGHTMODE|int} {% endif %}


[gcode_macro PRINT_START]
gcode:
  {% set macro_park  = params.PARKMACRO |default(printer["gcode_macro _PRINTER_SETTINGS"].macro_park ) %}
  {% set macro_purge = params.PURGEMACRO|default(printer["gcode_macro _PRINTER_SETTINGS"].macro_purge) %}

  {% set temp_bed    = params.BED       |default(  0)|float %}
  {% set temp_he     = params.HOTEND    |default(205)|float %}
  {% set do_mesh     = params.MESH      |default(99)|int %}
  {% set temp_probe  = params.PROBETEMP |default(150)|int %}
  {% set tool        = params.TOOL      |default(-1)|int %} # 0, 1 ..  ref T[initial_tool]

  {% if printer.configfile.toolchanger is defined and 
        printer.toolchanger.tool_number != 0 and 
        ('x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes) %}
    { action_raise_error("Can only home XY with tool 0")} 
  {% endif %}

  {% if printer.configfile.config.heater_bed.control == "mpc" or printer.configfile.config.extruder.control == "mpc" %}
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL} {% endif %}

  _set_status STATE="status_busy"
  _cpufreq_set GOVERNOR=performance
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=1 {% endif %}
  CLEAR_PAUSE
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0             ; clear any Z offset
  M107                             ; turn off PCF
  {% if printer['fan_generic mcu'] is defined %} SET_FAN_SPEED FAN=mcu SPEED=1.0 {% endif %} ; enable electronics bay fan
  M140 S{temp_bed}                 ; set bed temp
  {% if printer.toolchanger is defined %} 
    M104 T{tool} S{temp_probe}        ; set nozzle probe temp
  {% else %}
    M104 S{temp_probe}               ; set nozzle probe temp
  {% endif %}

  _set_status STATE="_beep_caution_printer_moving"
  G4 P3000
  
  _set_status STATE="status_homing"
  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
    G28 X Y 
  {% endif %}
  G28 Z
  {% if temp_bed != 0 %} 
    _set_status STATE="status_heating"
    {% if printer.configfile.settings.scanner   is defined %}   ; preheat scanner coil
      {% if printer.heater_bed.temperature < temp_bed * 0.90 %} ; its not a immediate reprint 
        {% set th = printer.toolhead %}
        G90
        G0 Z20
        G0 X{th.axis_maximum.x / 2} Y{th.axis_minimum.y + 10} F9000
        {% if temp_bed > 80 %} {% set probe_retract = 15 %} {% else %} {% set probe_retract = 5 %} {% endif %}
        PROBE_ACCURACY SAMPLES=1 SAMPLE_RETRACT_DIST=5 PROBE_SPEED=5
        G0 Z{probe_retract}
      {% endif %}
    {% endif %}
    M190 S{temp_bed}
    G0 Z20
  {% endif %}

  # wipe, no purge {macro_wipe} purge=0

  {% if printer.configfile.settings.quad_gantry_level is defined or
        printer.configfile.settings.z_tilt is defined or 
        printer.configfile.settings.z_tilt_ng is defined %}
    _set_status STATE="status_leveling"
    {% set tilt_height = 2 if printer.configfile.settings.scanner is defined else 10 %}
    {% if printer.configfile.settings.quad_gantry_level is defined %}
      {% set leveler = printer.quad_gantry_level %}
      {% set command = "QUAD_GANTRY_LEVEL" %}
    {% elif printer.configfile.settings.z_tilt is defined %}
      {% set leveler = printer.z_tilt %}
      {% set command = "Z_TILT_ADJUST" %}
    {% elif printer.configfile.settings.z_tilt_ng is defined %}
      {% set leveler = printer.z_tilt_ng %}
      {% set command = "Z_TILT_ADJUST" %}
    {% endif %}
    
    {% if leveler is defined %}
      {% if printer.configfile.settings.scanner is defined and not leveler.applied %}
        { command } HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7
      {% endif %}
      M400
      G4 P500
      { command } HORIZONTAL_MOVE_Z={ tilt_height }
    {% endif %}
    G28 Z
  {% endif %}

  # wipe, no purge {macro_wipe} purge=0 # maybe not

  {% if do_mesh == 0 %} RESPOND TYPE=command MSG='Mesh disabled'
  {% else %} 
    _set_status STATE="status_meshing"
    {% if do_mesh == 1 %} BED_MESH_CALIBRATE {% else %} BED_MESH_CALIBRATE ADAPTIVE=1 {% endif %}
  {% endif %}
  
  {% if printer.configfile.settings.scanner is defined %}
    {% if printer.extruder.temperature < temp_probe * 0.95 %}
      {% if printer["gcode_macro %s" % (macro_park)]  is defined %} {macro_park}  {% endif %} ; replace with purge bucket macro
      M109 S{temp_probe} ; wait for probe temp
    {% endif %}
    _set_status STATE="status_calibrating_z"
    #{% if printer.configfile.settings.bed_mesh.zero_reference_position  is defined %}
    #  {% set probe_loc_x, probe_loc_y = printer.configfile.config.bed_mesh.zero_reference_position.replace(' ', '').split(',') %}
    #  G90
    #  G0 Z20
    #  G0 X{probe_loc_x} Y{probe_loc_y} F9000
    #{% endif %}
    CARTOGRAPHER_TOUCH SPEED=2 FUZZY=2
  {% endif %}

  _set_status STATE="status_heating"
  {% if printer["gcode_macro %s" % (macro_park)]  is defined %} {macro_park}  {% endif %} ; replace with purge bucket macro
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=1 {% endif %}
  M109 S{temp_he}

  _set_status STATE="status_printing"
  {% if macro_purge != 'none' %}                                {macro_purge} {% endif %}      


[gcode_macro _set_status]
gcode:
  {% set prt_state = params.STATE|default("none") %}
  {% set prt_msg   = params.MSG  |default("none") %}
  {% if printer.configfile.settings.respond     is defined %}
    {% if prt_msg == 'none' %}
      RESPOND MSG='{"----< %s" % (prt_state|replace("_", " "))}'
    {% else %}
      RESPOND MSG='{"----< %s" % (prt_msg)}'
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro %s" % (prt_state)] is defined %}
    {prt_state} 
  {% endif %}


[gcode_macro START_PRINT]
gcode:
  PRINT_START { rawparams }

[gcode_macro PRINT_END]
gcode:
  M400                             ; Finish Moves
  M104 S0                          ; turn off hotend
  M140 S0                          ; turn off bed

  {% if printer.configfile.toolchanger is defined and 
        printer.toolchanger.tool_number != 0 %}
    T0
  {% endif %}
  
  _TOOLHEAD_PARK_PAUSE_CANCEL
  RESPOND PREFIX=ðŸ’¨ MSG=" Toolhead parked"
  
  M221 S100                        ; reset flow to 100%
  M220 S100                        ; reset speed to 100%
  
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1

  RESPOND PREFIX= MSG=""
  M117
  _set_status STATE="_beep_done"
  _set_status STATE="status_ready"

  {% if printer['fan_generic mcu'] is defined %} SET_FAN_SPEED FAN=mcu SPEED=0 {% endif %} 
  _cpufreq_set GOVERNOR=ondemand
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=0 {% endif %}

  M106 S0   ; turn off fan
  {% if printer.configfile.toolchanger is defined 
    {% for tool_number in printer.toolchanger.tool_numbers %}
      {% set tool_name = "T" ~ tool_number %}
      {% set tool_section = printer["tool " ~ tool_name] %}
      {% set extruder_name = tool_section.extruder %}
      SET_STEPPER_ENABLE STEPPER={{ extruder_name }} ENABLE=0
    {% endfor %}
  {% else %}
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  {% endif %}
  

[gcode_macro END_PRINT]
gcode:
  PRINT_END { rawparams }

[gcode_macro PARK_REAR]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F6000

[gcode_macro PARK_FRONT]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F6000

[gcode_macro RELAX_BELTS]
gcode:
  G90
  {% set th = printer.toolhead %}
  {% set margin = 10 %}
  G0 Z50
  G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
  G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 X{th.axis_minimum.x + margin} F6000
  G0 X{th.axis_maximum.x - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 Y{th.axis_minimum.y + margin} F6000
  G0 Y{th.axis_maximum.y - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000


[gcode_macro SHUTDOWN_PRINTER]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}
  TURN_OFF_HEATERS
  {% if printer['neopixel skirt']     is defined %}  
    SET_LED LED="skirt" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    M400
    G4 P2000 {% endif %}
  {% if printer['neopixel case_leds'] is defined %}
    SET_LED LED="case_leds" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    M400
    G4 P2000 {% endif %}
  {% if printer['neopixel sb_leds']   is defined %}
    SET_LED LED="sb_leds" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    M400
    G4 P2000 {% endif %}
  M84

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
#[gcode_macro _PRINTER_POWEROFF]
#gcode:
#  {action_call_remote_method("set_device_power", device="printer",STATE=off")}
  
##################
# Todo: interrutable HEATsoak with delay gcode
[gcode_macro HEATSOAK] 
gcode:
  _set_status STATE="status_heating"
  {% set DWELL = params.DWELL|default(600000)|int %} ; 10 minutes 
  G4 P{DWELL}
  _set_status STATE="_beep_preheated"

## safety firster
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling if the printer is leveled, if not level the printer
gcode:
  {% if printer.configfile.settings.z_tilt is defined and not printer.z_tilt.applied %} 
    Z_TILT_ADJUST
    G28 Z
  {% elif printer.configfile.settings.z_tilt_ng is defined and not printer.z_tilt_ng.applied %} 
    Z_TILT_ADJUST
    G28 Z
  {% elif printer.configfile.settings.quad_gantry_level is defined and not printer.quad_gantry_level.applied %} 
    QUAD_GANTRY_LEVEL
    G28 Z
  {% endif %}
  _BED_MESH_CALIBRATE {rawparams}



# credits https://github.com/DraftShift/klipper-toolchanger/blob/a926b484fb5b9ba99585e8bd3b6b942cf43de72c/examples/toolchanger-extra-macros.cfg#L134
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
variable_default_deadband: 4.0
gcode:
  {% set s = params.S|float %}
  {% if printer.configfile.toolchanger is defined %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}
  {% else %}
    {% set extruder = printer.extruder %}
  {% endif %}

  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 4.0
gcode:
  {% set s = params.S|float %}
  {% set deadband = default_deadband|float %}
  {% if params.D is defined %}
      {% set deadband = params.D|float %}
  {% endif %}
  {% if printer.configfile.toolchanger is defined %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}
  {% else %}
    {% set extruder = printer.extruder %}
  {% endif %}
  
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
  {% if s > 0 %}
      TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
  {% endif %}


# source: https://github.com/Frix-x/klippain/blob/main/macros/helpers/bed_heater_ctrl.cfg
[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% set S = params.S|float %}
  {% set actual_temp = printer.heater_bed.temperature|float %}
  
  {% if printer["gcode_macro _BEDFANVARS"] is defined %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% if S >= THRESHOLD %} BEDFANSSLOW
    {% else %}              BEDFANSOFF  {% endif %} 
  {% endif %}
  
  M140 { rawparams } 
  {% if S != 0 %}
    {% if actual_temp <= S %} TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S}
    {% else %}                TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={S} {% endif %}   
  {% endif %}

  {% if printer["gcode_macro _BEDFANVARS"] is defined %} {% if S >= THRESHOLD %} BEDFANSFAST {% endif %}{% endif %} 


####
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
  {% set pa = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro M600]
gcode:
  PAUSE X=10 Y=10 Z_MIN=50
  _set_status STATE="_beep_filament_change"

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  55
variable_purge_distance:  25
gcode:
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = 50 * 60 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{max_velocity} # fast-load
  G1 E{purge_distance} F{speed} # purge
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  55
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %} {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}           {% set ns.path = ['printer.', item, '']             %} {% endif %} 
    {% if search in ns.path|lower %} { action_respond_info(ns.path|join) }{% endif %} 
    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}
        {% if ' ' in childkey %} {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}               {% set null = ns.path.append(".%s" % (childkey))    %}{% endif %} 

        {% if child is mapping  %} { loop(child.items()) }
        {% else %}
            {% if search in ns.path|lower %}{ action_respond_info("%s : %s" % (ns.path|join, child)) } {% endif %} 
        {% endif %}           
      {% endfor %}
    {% endif %} 
  {% endfor %}
