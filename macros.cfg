
[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: _SET_VELOCITY_LIMIT
description: Alter the velocity limits unless printer is in nightmode
variable_nightmode: 0 
gcode: 
  {% if nightmode != 1 or params.NIGHTMODE is defined %} _SET_VELOCITY_LIMIT { rawparams } {% endif %}
  {% if params.NIGHTMODE is defined %} SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=nightmode VALUE={params.NIGHTMODE|int} {% endif %}


[gcode_macro PRINT_START]
gcode:
  {% set macro_park  = params.PARKMACRO |default(printer["gcode_macro _PRINTER_SETTINGS"].macro_park ) %}
  {% set macro_purge = params.PURGEMACRO|default(printer["gcode_macro _PRINTER_SETTINGS"].macro_purge) %}

  {% set temp_bed    = params.BED       |default(  0)|float %}
  {% set temp_he     = params.HOTEND    |default(205)|float %}
  {% set do_mesh     = params.MESH      |default(99)|int %}
  {% set temp_probe  = params.PROBETEMP |default(150)|int %}
  {% set tool        = params.TOOL      |default(-1)|int %} # 0, 1 ..  ref T[initial_tool]

  {% if printer.toolchanger is defined %} 
    _IS_HOMEABLE
    T0
    {% if params.IS_EXTRUDER_USED is defined %}
      {% set extruders_used = params.IS_EXTRUDER_USED.split(',')  %}
      {% for i in range(extruders_used|length) %}
        {% if extruders_used[i]|lower in ['true', '1'] %}
          {% if printer["gcode_macro {i}"] is defined %}
            SET_GCODE_VARIABLE MACRO="T{i}" VARIABLE=tool_used VALUE=False
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO="T0" VARIABLE=tool_used VALUE=True # temp fix
  {% endif %}

  _set_status STATE="status_busy"
  _cpufreq_set GOVERNOR=performance
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=1 {% endif %}
  CLEAR_PAUSE
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0 

  {% if printer['fan_generic mcu'] is defined %} SET_FAN_SPEED FAN=mcu SPEED=1.0 {% endif %} ; enable electronics bay fan

  {% if printer.configfile.config.heater_bed.control == "mpc" or printer.configfile.config.extruder.control == "mpc" %} _SET_MPC_MATERIAL MATERIAL={params.MATERIAL} {% endif %}
  M140 S{temp_bed}
  M104 S{temp_probe}

  _set_status STATE="_beep_caution_printer_moving"
  G4 P3000
  
  _set_status STATE="status_homing"
  {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %} G28 X Y {% endif %}
  G28 Z
  
  {% if temp_bed != 0 %} 
    _set_status STATE="status_heating"
    {% if printer.heater_bed.temperature < temp_bed * 0.90 %} ; its not a immediate reprint 
      {% if printer["gcode_macro _undocked_brushpark"] is defined %} _undocked_brushpark  {% endif %}
      {% if printer["gcode_macro CARTO_PREHEAT_COIL"] is defined %} CARTO_PREHEAT_COIL  {% endif %}
    {% endif %}
    M190 S{temp_bed}
    {% if printer.configfile.settings.scanner   is defined %} G0 Z20 {% endif %}
  {% endif %}
  M109 S{temp_probe}
  
  _LEVEL_IF_LEVELER
  
  {% if do_mesh == 0 %} RESPOND TYPE=command MSG='Mesh disabled'
  {% else %} 
    _set_status STATE="status_meshing"
    {% if do_mesh == 1 %} BED_MESH_CALIBRATE {% else %} BED_MESH_CALIBRATE ADAPTIVE=1 {% endif %}
  {% endif %}
  
  {% if printer.configfile.settings.scanner is defined %}
    _set_status STATE="status_calibrating_z"
    CARTOGRAPHER_TOUCH SPEED=2 FUZZY=2
  {% endif %}

  _set_status STATE="status_heating"
  {% if printer["gcode_macro %s" % (macro_park)]  is defined %} {macro_park}  {% endif %} ; replace with purge bucket macro
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=1 {% endif %}
  M109 S{temp_he}

  _set_status STATE="status_printing"
  {% if macro_purge != 'none' %}                                {macro_purge} {% endif %}      



[gcode_macro START_PRINT]
gcode:
  PRINT_START { rawparams }

[gcode_macro PRINT_END]
gcode:
  M221 S100                        ; reset flow to 100%
  M220 S100                        ; reset speed to 100%
  M400                             ; Finish Moves
  TURN_OFF_HEATERS

  {% if printer.toolchanger is defined %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position.z|float %}
    G0 Z{ [cur_z+5.0, max_z]|min } F{printer.toolchanger.params_fast_speed}
  
    _undocked_brushpark TN=0
    {% for tool_number in printer.toolchanger.tool_numbers %}
      {% set tool_name = "T" ~ tool_number %}
      {% set tool_section = printer["tool " ~ tool_name] %}
      RESPOND MSG='{"stepper and fan for  %s" % (tool_section.name)}'
      SET_STEPPER_ENABLE     STEPPER={tool_section.extruder} ENABLE=0
      SET_FAN_SPEED              FAN={tool_section.fan}       SPEED=0
    {% endfor %}
  {% else %}
    SET_STEPPER_ENABLE     STEPPER="extruder" ENABLE=0
    M106 S0   ; turn off fan
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  
  RESPOND PREFIX= MSG=""
  M117
  _set_status STATE="_beep_done"
  _set_status STATE="status_ready"

  SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1

  {% if printer['fan_generic mcu'] is defined %} SET_FAN_SPEED FAN=mcu SPEED=0 {% endif %} 
  {% if printer["gcode_macro CHECK_ALL_FANS"] is defined %} UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=0 {% endif %}
  
  _cpufreq_set GOVERNOR=ondemand


[gcode_macro END_PRINT]
gcode:
  PRINT_END { rawparams }


[gcode_macro _LEVEL_IF_LEVELER]
description: Levels the printer and rehomes Z if a leveler is defined
gcode:
  {% if printer.configfile.settings.quad_gantry_level is defined or
        printer.configfile.settings.z_tilt is defined or 
        printer.configfile.settings.z_tilt_ng is defined %}
    _set_status STATE="status_leveling"
    {% set tilt_height = 2 if printer.configfile.settings.scanner is defined else 5 %}
    {% if printer.configfile.settings.quad_gantry_level is defined %}
      {% set leveler = printer.quad_gantry_level %}
      {% set command = "QUAD_GANTRY_LEVEL" %}
    {% elif printer.configfile.settings.z_tilt is defined %}
      {% set leveler = printer.z_tilt %}
      {% set command = "Z_TILT_ADJUST" %}
    {% elif printer.configfile.settings.z_tilt_ng is defined %}
      {% set leveler = printer.z_tilt_ng %}
      {% set command = "Z_TILT_ADJUST" %}
    {% endif %}
    
    {% if leveler is defined %}
      {% if printer.configfile.settings.scanner is defined and not leveler.applied %} 
        { command } HORIZONTAL_MOVE_Z=20 RETRY_TOLERANCE=1 PROBE_SPEED=15 LIFT_SPEED=7 
      {% endif %}
      { command } HORIZONTAL_MOVE_Z={ tilt_height }
      G28 Z
    {% endif %}
  {% endif %}

[gcode_macro _set_status]
gcode:
  {% set prt_state = params.STATE|default("none") %}
  {% set prt_msg   = params.MSG  |default("none") %}
  {% if printer.configfile.settings.respond     is defined %}
    {% if prt_msg == 'none' %}
      RESPOND MSG='{"----< %s" % (prt_state|replace("_", " "))}'
    {% else %}
      RESPOND MSG='{"----< %s" % (prt_msg)}'
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro %s" % (prt_state)] is defined %}
    {prt_state} 
  {% endif %}
  
[gcode_macro PARK_REAR]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_maximum.y - 5} F6000

[gcode_macro PARK_FRONT]
gcode:
  G90
  {% set th = printer.toolhead %}
  G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 5} F6000

[gcode_macro RELAX_BELTS]
gcode:
  G90
  {% set th = printer.toolhead %}
  {% set margin = 10 %}
  G0 Z50
  G0 X{th.axis_maximum.x - margin} Y{th.axis_maximum.y - margin} F6000 
  G0 X{th.axis_minimum.x + margin} Y{th.axis_minimum.y + margin} F6000 
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 X{th.axis_minimum.x + margin} F6000
  G0 X{th.axis_maximum.x - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000
  G0 Y{th.axis_minimum.y + margin} F6000
  G0 Y{th.axis_maximum.y - margin} F6000
  G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2} F6000


[gcode_macro SHUTDOWN_PRINTER]
gcode:
  _cpufreq_set GOVERNOR=ondemand
  TURN_OFF_HEATERS
  {% for k in printer.configfile.settings.keys() %}
    {% if k.startswith("neopixel") %}
      SET_LED LED={k.split(' ',1)| last } RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
      G4 P1000
    {% endif %}
  {% endfor %}
  M84

# Qoute:
# > this is where the awkwardness of JINJA (the shit in the {}) being a preprocessor shows up
# > the jinja stuff gets executed first, before any of the actual gcode does...
# so 2 macros are needed
#[gcode_macro _PRINTER_POWEROFF]
#gcode:
#  {action_call_remote_method("set_device_power", device="printer",STATE=off")}
  
##################
# Todo: interrutable HEATsoak with delay gcode
[gcode_macro HEATSOAK] 
gcode:
  _set_status STATE="status_heating"
  {% set DWELL = params.DWELL|default(600000)|int %} ; 10 minutes 
  G4 P{DWELL}
  _set_status STATE="_beep_preheated"

## safety firster
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling if the printer is leveled, if not level the printer
gcode:
  {% if printer.configfile.settings.z_tilt is defined and not printer.z_tilt.applied %} 
    Z_TILT_ADJUST
    G28 Z
  {% elif printer.configfile.settings.z_tilt_ng is defined and not printer.z_tilt_ng.applied %} 
    Z_TILT_ADJUST
    G28 Z
  {% elif printer.configfile.settings.quad_gantry_level is defined and not printer.quad_gantry_level.applied %} 
    QUAD_GANTRY_LEVEL
    G28 Z
  {% endif %}
  _BED_MESH_CALIBRATE {rawparams}




[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and continue
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
variable_default_deadband: 4.0
gcode:
  {% set s = params.S|float %}
  
  {% set tool_id = params.T if params.T is defined 
      else None if printer.toolchanger is not defined 
      else printer.toolchanger.tool_number %}
  {% set extruder = printer["tool T" ~ tool_id].extruder if printer["tool T" ~ tool_id] is defined else "extruder" %}

  {action_respond_info(extruder ~ " -> " ~ s ~ "°c")}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 4.0
gcode:
  {% set s = params.S|float %}
  {% set deadband = params.D|float if params.D is defined else default_deadband|float %}
  
  {% set tool_id = params.T if params.T is defined 
      else None if printer.toolchanger is not defined 
      else printer.toolchanger.tool_number %}
  {% set extruder = printer["tool T" ~ tool_id].extruder if printer["tool T" ~ tool_id] is defined else "extruder" %}

  {action_respond_info(extruder ~ " -> " ~ s ~ "°c + waiting +/- " ~ (deadband/2))}
  SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
  
  {% if s > 0 %}
    TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
  {% endif %}
  


# source: https://github.com/Frix-x/klippain/blob/main/macros/helpers/bed_heater_ctrl.cfg
[gcode_macro M190]
rename_existing: M190.1
variable_default_deadband: 2.0
gcode:
  {% set s = params.S|float %}
  {% set deadband = params.D|float if params.D is defined else default_deadband|float %}
  #{% set actual_temp = printer.heater_bed.temperature|float %}
  
  {% if printer["gcode_macro _BEDFANVARS"] is defined %}
    {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
    {% if s >= THRESHOLD %} BEDFANSSLOW
    {% else %}              BEDFANSOFF  {% endif %} 
  {% endif %}
  
  M140 { rawparams } 
  {% if S != 0 %}
    #{% if actual_temp <= S %} TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s}
    #{% else %}                TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={s} {% endif %}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for temp (within D degrees)
  {% endif %}

  {% if printer["gcode_macro _BEDFANVARS"] is defined %} {% if s >= THRESHOLD %} BEDFANSFAST {% endif %}{% endif %} 


####
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
  {% set pa = params.K|float %}
  SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro M600]
gcode:
  PAUSE X=10 Y=10 Z_MIN=50
  _set_status STATE="_beep_filament_change"

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  55
variable_purge_distance:  25
gcode:
  {% set speed = params.SPEED|default(300) %}
  {% set max_velocity = 50 * 60 %}
  SAVE_GCODE_STATE NAME=load_state
  G91
  G92 E0
  G1 E{load_distance} F{max_velocity} # fast-load
  G1 E{purge_distance} F{speed} # purge
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  55
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = 50  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %} {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}           {% set ns.path = ['printer.', item, '']             %} {% endif %} 
    {% if search in ns.path|lower %} { action_respond_info(ns.path|join) }{% endif %} 
    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}
        {% if ' ' in childkey %} {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}               {% set null = ns.path.append(".%s" % (childkey))    %}{% endif %} 

        {% if child is mapping  %} { loop(child.items()) }
        {% else %}
            {% if search in ns.path|lower %}{ action_respond_info("%s : %s" % (ns.path|join, child)) } {% endif %} 
        {% endif %}           
      {% endfor %}
    {% endif %} 
  {% endfor %}
