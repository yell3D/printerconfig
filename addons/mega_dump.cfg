[gcode_macro SEARCH_VARS]
gcode:
  MEGA_DUMP { rawparams }

# source: https://github.com/Contomo/VoronTC-backupConfgis/blob/main/printer_data/config/debugging/mega_dump.cfg
# copy: 2025-05-18
[gcode_macro MEGA_DUMP]
description: Up to N-level BFS. If container path matches, show (dict) and skip inside. [S=foo°bar°stack] will return results containing foo, and bar, and stack.
variable_color_path:    "rgb(128,128,128)"  # light gary
variable_color_key:     "rgb(0,150,255)"    # blue
variable_color_val:     "rgb(255,200,50)"   # yellow
variable_color_typ:     "rgb(180,180,180)"  # whiteish
variable_color_match:   "rgb(255,0,100)"    # magenta
variable_long_limit:    "120"                 # characters before cutoff
variable_max_depth:     "5"                   # 5 levels (3-4 should work too)
gcode:
    {% set raw_s = params.S|default("")|string %}
    {% set search_lc = raw_s|lower %}
    {% set terms = search_lc.split("°") %}

    #{% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set nl = '<br>' %}

    {% set ns = namespace(lines=[], total=0, stack=[], done=False, doneAtLine="None", val="") %}

    {% for top_key in printer %}
        {% set item = [top_key|string, printer[top_key], 1] %}
        {% set ns.stack = ns.stack + [ item ] %}
    {% endfor %}

    {% for i in range(99999) %}
        {% if ns.stack|length == 0 %}
            {% set ns.done = 1 %}
        {% else %}
            {% set popped = ns.stack[ ns.stack|length -1 ] %}
            {% set ns.stack = ns.stack[:ns.stack|length -1] %}
            {% set cur_path = popped[0] %}
            {% set cur_obj  = popped[1] %}
            {% set depth    = popped[2] %}
            {% set typ_str  = cur_obj.__class__.__name__|string %}

            {% set val_str = "" %}
            {% if typ_str not in ["dict", "list", "tuple", "set"] %}
                {% set val_str = cur_obj|string %}
            {% endif %}

            {% set combined = cur_path|lower %}
            {% if val_str %}
                {% set combined = combined ~ " " ~ val_str|lower ~ typ_str|lower %}
            {% endif %}

            {% set match_ns = namespace(keep=true) %}
            {% for t in terms %}
                {% if t|length > 0 and not (t in combined) %}
                    {% set match_ns.keep = false %}
                {% endif %}
            {% endfor %}
            
            {% if 'configfile.config' in cur_path|lower %}
                {% set match_ns.keep = false %}
            {% endif %}

            {% if match_ns.keep %}
                {% set ns.total = ns.total + 1 %}
                {% set ns.final_path = cur_path %}
                {% set ns.final_val  = val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set ns.final_typ  = "(" ~ typ_str ~ ")" %}
                {% set segments = cur_path.split(".") %}
                {% set ns.final_key = segments[segments|length -1] %}

                # |replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;")

                {% set hover_path = cur_path|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set hover = "printer." ~ hover_path %}

                # ------------------------------------------------------------------ #
                #  Two-pass highlighter: avoids tuching characters that already
                #  live inside earlier span tags.
                #  - terms  - list split from the S=… parameter
                #  - color_match  – your highlight RGB variale
                #  - ns.final_path / key / val / typ  – the strings we want to color
                # ------------------------------------------------------------------ #

                {% set mask = namespace(path = ns.final_path, key  = ns.final_key, val  = ns.final_val, typ  = ns.final_typ) %}

                {% for t in terms %}
                    {% if t|length > 0 %}
                        {% set term = t|lower %}
             
                        {% set lower_path = mask.path|lower %}
                        {% set lower_key  = mask.key|lower %}
                        {% set lower_val  = mask.val|lower %}
                        {% set lower_typ  = mask.typ|lower %}

                        # ---- path ----
                        {% set idx = lower_path.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.path[idx:idx + term|length] %}
                            {% set mask.path = mask.path[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.path[idx + term|length:] %}
                        {% endif %}
                        # ---- key ----
                        {% set idx = lower_key.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.key[idx:idx + term|length] %}
                            {% set mask.key = mask.key[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.key[idx + term|length:] %}
                        {% endif %}
                        # ---- val ----
                        {% set idx = lower_val.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.val[idx:idx + term|length] %}
                            {% set mask.val = mask.val[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.val[idx + term|length:] %}
                        {% endif %}
                        # ---- typ ----
                        {% set idx = lower_typ.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.typ[idx:idx + term|length] %}
                            {% set mask.typ = mask.typ[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.typ[idx + term|length:] %}
                        {% endif %}
                    {% endif %}
                {% endfor %}

                {% set ns.final_path = mask.path %}
                {% set ns.final_key  = mask.key  %}
                {% set ns.final_val  = mask.val  %}
                {% set ns.final_typ  = mask.typ  %}

                {% if typ_str in ["dict", "list", "tuple", "set"] and cur_obj|length > 0 %}
                    {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {<span style='color:" ~ color_val ~ "'>(" ~ typ_str ~ ")</span>}</summary>" %}
                    {% set children = [] %}
                    {% set show_keys = cur_obj.keys()|list if typ_str == "dict" else range(cur_obj|length) %}
                    {% for k in show_keys[:10] %}
                        {% set val_type = cur_obj[k].__class__.__name__ %}
                        #{% if val_type not in ["dict", "list", "tuple", "set"] %}
                            {% set val_str = cur_obj[k]|string %}
                            {% if val_str|length > 50 %}
                                {% set val_str = val_str[:47] ~ "..." %}
                            {% endif %}
                            {% set child_line = "<div style='margin-left:1em'><span style='color:" ~ color_key ~ "'>" ~ k|string ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~ val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") ~ "</span> <span style='color:" ~ color_typ ~ "'>(" ~ val_type ~ ")</span></div>" %}
                            {% set _ = children.append(child_line) %}
                        #{% endif %}
                    {% endfor %}
                    {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ children|join() ~ "</details></span>" %} # children|join(nl)
                    {% set ns.lines = ns.lines + [html] %}
                {% else %}
                    # -------------------------------------------------------------------- #
                    #  BUILD PRETTY INDENT
                    #  – ident at if else for starts
                    #  – reduce indent at ending tags
                    # -------------------------------------------------------------------- #
                    {% set raw_lines = ns.final_val.split('\n') %}
                    {% set ns_gcode = namespace(dent = 0, prev_empty = false, unclosed = false) %}
                    {% set html_lines = [] %}

                    {% for ln in raw_lines %}
                        {% set t = ln|trim %}

                        # 1 - close or else/elif → pop
                        {% if '{% end' in t or '{% el' in t %}
                            {% set ns_gcode.dent = [ns_gcode.dent - 1, 0]|max %}
                        {% endif %}

                        # 2 - render at current indent
                        {% set pad = '&nbsp;&nbsp;' * ns_gcode.dent %}

                        # 2b - dont spam newlines where klipper added newline for a removed comment.
                        {% if t == '' %}
                            {% if not ns_gcode.prev_empty %}
                                {% set _ = html_lines.append(nl) %}
                                {% set ns_gcode.prev_empty = true %}
                            {% endif %}
                        {% else %}
                            {% set _ = html_lines.append(pad ~ t ~ nl) %}
                            {% set ns_gcode.prev_empty = false %}
                        {% endif %}

                        # 2c - if it ends with a pure closer, inject blank line
                        {% if (t.endswith('{% endif %}') or t.endswith('{% endfor %}')) and (t != ('{% endif %}' or '{% endfor %}')) and not ns_gcode.prev_empty %}
                            {% set _ = html_lines.append(nl) %}
                        {% endif %}

                        # 3 - opener or else/elif → push
                        {% if '{% if' in t or '{% for' in t or '{% el' in t %}
                            {% set ns_gcode.dent = ns_gcode.dent + 1 %}
                        {% endif %}
                    {% endfor %}

                    # 4 - Re-join, wrap in your summary/details logic as before 
                    {% set plain_full = html_lines|join('') %}

                    # -------------------------------------------------------------------- #
                    #  DISPLAY WITH SUMMARY
                    #  – if the string is short  → keep the old one-liner
                    #  – if the string is long   → show preview + expandable details
                    # -------------------------------------------------------------------- #
                    {% if plain_full|length <= long_limit|int and '\n' not in plain_full %}
                        # ── SHORT STRING ─────────────────────────── #
                        {% set line = "<span title='" ~ hover ~ "'>" ~
                            "<span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {" ~
                            "<span style='color:" ~ color_key  ~ "'>" ~ ns.final_key  ~ "</span>: " ~
                            "<span style='color:" ~ color_val  ~ "'>" ~ plain_full|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ  ~ "'>" ~ ns.final_typ   ~ "</span>}" ~
                            "</span>" %}
                        {% set ns.lines = ns.lines + [ line ] %}

                    {% else %}
                        # ── LONG STRING → build preview around 1st highlight + details─── #

                        # find earliest highlighted <span> placeholder (§n§ already expanded) #
                        {% set first_idx = plain_full.find(color_match) %}
                        {% if first_idx == -1 %} {% set first_idx = 0 %} {% endif %}

                        {% set preview_start = [first_idx - 35, 0]|max %}
                        {% set preview_end = preview_start + 75|int %}
                        {% set preview = plain_full[preview_start:preview_end] %}

                        # --- add ... if not cut at start
                        {% if preview_start > 0 %} {% set preview = "…" ~ preview %} {% endif %}
                        # --- add ... if not cut at end
                        {% if preview_end < plain_full|length %} {% set preview = preview ~ "…" %} {% endif %}

                        # summary line (preview) #
                        {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~
                            "</span> {" ~
                            "<span style='color:" ~ color_key ~ "'>" ~ ns.final_key ~ "</span>: " ~
                            "<span style='color:" ~ color_val ~ "'>" ~ preview|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ ~ "'>" ~ ns.final_typ ~ "</span>}</summary>" %}

                        # full content shown after expanding #
                        {% set details = "<div style='margin-left:1em; white-space:pre; overflow-x:auto;'>" ~ plain_full ~ "</div>" %}
                        {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ details ~ "</details></span>" %}

                        {% set ns.lines = ns.lines + [ html ] %}
                    {% endif %}
                {% endif %}
            # -------------------------------------------------------------------- #
            #  SEARCH FURTHER
            #  - if type contains contents, go further until max_depth is hit.
            #  - adds to the list the for loop accesses.
            # -------------------------------------------------------------------- #
            {% elif typ_str == "dict" and depth < max_depth|int %}
                {% for child_key in cur_obj %}
                    {% set next = cur_path ~ "." ~ child_key|string %}
                    {% set entry = [next, cur_obj[child_key], depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                {% endfor %}
            {% elif typ_str in ["list", "tuple", "set"] and depth < max_depth|int %}
                {% set idx = 0 %}
                {% for val in cur_obj %}
                    {% set next = cur_path ~ "[" ~ idx|string ~ "]" %}
                    {% set entry = [next, val, depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                    {% set idx = idx + 1 %}
                {% endfor %}
            {% endif %}
            {% if ns.done|default(false) and ns.doneAtLine == "None" %}
                {% set ns.doneAtLine=loop.index|string %}
                RESPOND MSG="{loop.index|string}"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if ns.lines|length == 0 %}
        {% set safe = raw_s|replace("'", "&apos;") %}
        RESPOND MSG="No matches found for '{safe}'"
    {% else %}
        # split into config vs everything else 
        {% set cfg = [] %}
        {% set oth = [] %}
        {% set hlp = [] %}
        {% for line in ns.lines %}
            {% if "<details title='printer.configfile.settings" in line or "<span title='printer.configfile.settings" in line %}
                {% set _ = cfg.append(line) %}
            {% elif "<details title='printer.gcode.commands" in line or "<span title='printer.gcode.commands" in line %}
                {% set _ = hlp.append(line) %}
            {% else %}
                {% set _ = oth.append(line) %}
            {% endif %}
        {% endfor %}

        # build the summaries 
        {% if oth %} {% set summary_oth = "<details><summary>others   (" ~ oth|length|string ~ " matches)</summary>" ~ (oth|join(nl)) ~ "</details>" %} {% endif %}
        {% if cfg %} {% set summary_cfg = "<details><summary>config   (" ~ cfg|length|string ~ " matches)</summary>" ~ (cfg|join(nl)) ~ "</details>" %} {% endif %}
        {% if hlp %} {% set summary_cfg = "<details><summary>help/cmd (" ~ hlp|length|string ~ " matches)</summary>" ~ (hlp|join(nl)) ~ "</details>" %} {% endif %}
        # send them both 
        {% set msg = "Found " ~ ns.lines|length|string ~ " matches for " ~ raw_s|replace("'", "&apos;") ~ ":" ~ summary_oth|replace('\n', nl)|replace('\r','') ~ summary_cfg|replace('\n', nl)|replace('\r','') %}
        RESPOND MSG="{msg}"
    {% endif %}