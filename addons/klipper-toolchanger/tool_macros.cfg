
[gcode_macro TOOLCHANGE_DEMO]
description: [SAMPLES=<int>]
  Run random tool changes.
  SAMPLES= Number of changes to run, default is 5 and starting with T0.
gcode:
    {% set t = params.SAMPLES|default(5)|int %}
    {% set toolmod = printer.toolchanger.tool_numbers | length %}
    {% for n in range(t) %}
      RESPOND TYPE=echo MSG='{"n is: " ~ n}'
      RESPOND TYPE=echo MSG='{"mod 2: " ~ (n % toolmod)}'
      T{(n % toolmod)}
      G4 P500
    {% endfor %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
  {% set tool_number = printer.toolchanger.tool_number  %}
  {% if tool_number != -1 %}
    {% set svf = printer.save_variables.variables %}
    SET_GCODE_OFFSET X={svf[ 't' + tool_number|string + '_offset_x']|float|round(3)} Y={svf[ 't' + tool_number|string + '_offset_y']|float|round(3)} Z={svf[ 't' + tool_number|string + '_offset_z']} MOVE=1
  {% else %}
    RESPOND PREFIX=⚠️ MSG="No tool loaded, got -1"
  {% endif %}
  
[gcode_macro TX]
gcode:
  {% set tool_number = params.TN|int %}
  {% set svf = printer.save_variables.variables %}

  {% if printer["gcode_macro _sb_vars"] is defined %} STATUS_READY {% endif %}
  SELECT_TOOL T={tool_number}
  _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
  {% if printer["gcode_macro _sb_vars"] is defined %}
    {% if printer.idle_timeout.state != "Printing" %} STATUS_BUSY
    {% else %} STATUS_PRINTING {% endif %}
  {% endif %}

[gcode_macro _undocked_brush_park_t0]
gcode:
  RESPOND PREFIX=🏝️ MSG="Brushparking T0"
  {% if printer.toolchanger.tool_number != 0 %} T0 {% endif %}
  {% set toolcfg = printer.configfile.settings['tool t0'] %}

  G90
  G0 X{toolcfg.params_detach_x} Y{toolcfg.params_safe_toolhead_y} F{printer.toolchanger.params_fast_speed}
  G0 Y{toolcfg.params_attach_y} F{printer.toolchanger.params_fast_speed}

  # maybe present print?
  #{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  #{% set cur_z = printer.toolhead.position[2]|float %}
  #G0 Z{ [cur_z+5.0, max_z]|min } F{fast} ; 5 ; Move 1 mm up to avoid crashing into things


[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 160 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
        M109 T
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}